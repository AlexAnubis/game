ArrayList<Note> player1Notes;
ArrayList<Note> player2Notes;

int player1Score = 0;
int player2Score = 0;
int maxScore = 10;

int gameStartTime;
boolean gameStarted = false;
int songDuration = 20000;

String screen = "start";
String result = "";

String player1Feedback = "";
String player2Feedback = "";
int feedbackDuration = 500;
int player1FeedbackTime;
int player2FeedbackTime;

void setup() {
  size(800, 600);
  textAlign(CENTER, CENTER);
  textSize(32);
  player1Notes = new ArrayList<Note>();
  player2Notes = new ArrayList<Note>();
}

void draw() {
  if (screen.equals("start")) {
    showInstructions();
  } else if (screen.equals("game")) {
    playGame();
  } else if (screen.equals("end")) {
    showEndScreen();
  }
}

void showInstructions() {
  background(0);
  fill(255);
  text("Two-Player Rhythm Game", width / 2, height / 3);
  textSize(20);
  text("Player 1: Press A, S, D, F", width / 2, height / 2);
  text("Player 2: Press J, K, L, ;", width / 2, height / 2 + 40);
  text("Press any key to start!", width / 2, height / 2 + 80);
}

void playGame() {
  if (!gameStarted) {
    gameStartTime = millis();
    gameStarted = true;
    spawnNotes();
  }

  background(0);
  drawLanes();
  drawHitLine();
  updateNotes(player1Notes, color(0, 255, 255), 100);
  updateNotes(player2Notes, color(255, 0, 255), 500);
  fill(255);
  textSize(32);
  text("Player 1 Score: " + player1Score, 200, 50);
  text("Player 2 Score: " + player2Score, 600, 50);
  displayFeedback();

  if (millis() - gameStartTime > songDuration) {
    if (player1Score > player2Score) {
      result = "Player 1 Wins!";
    } else if (player2Score > player1Score) {
      result = "Player 2 Wins!";
    } else {
      result = "It's a tie!";
    }
    screen = "end";
  }
}

void drawLanes() {
  stroke(255);
  strokeWeight(2);
  for (int i = 0; i < 4; i++) {
    line(100 + i * 100, 0, 100 + i * 100, height);
  }
  for (int i = 0; i < 4; i++) {
    line(500 + i * 100, 0, 500 + i * 100, height);
  }
}

void drawHitLine() {
  stroke(255);
  strokeWeight(4);
  line(0, height - 100, width, height - 100);
}

void updateNotes(ArrayList<Note> notes, color noteColor, int xPos) {
  for (int i = notes.size() - 1; i >= 0; i--) {
    Note note = notes.get(i);
    note.move();
    note.display(noteColor, xPos);
    if (note.y > height - 80) {
      notes.remove(i);
      showMiss(note.lane);
    }
  }
}

void showMiss(int lane) {
  if (lane >= 1 && lane <= 4) {
    player1Feedback = "Miss";
    player1FeedbackTime = millis();
  } else if (lane >= 5 && lane <= 8) {
    player2Feedback = "Miss";
    player2FeedbackTime = millis();
  }
}

void spawnNotes() {
  for (int i = 0; i < 50; i++) {
    player1Notes.add(new Note(int(random(1000, 20000)), int(random(1, 4))));
    player2Notes.add(new Note(int(random(1000, 20000)), int(random(1, 4))));
  }
}

void keyPressed() {
  if (screen.equals("start")) {
    screen = "game";
    return;
  }
  
  if (key == 'a') {
    checkClosestHit(player1Notes, 1, 1);
  } else if (key == 's') {
    checkClosestHit(player1Notes, 2, 1);
  } else if (key == 'd') {
    checkClosestHit(player1Notes, 3, 1);
  } else if (key == 'f') {
    checkClosestHit(player1Notes, 4, 1);
  }
  
  if (key == 'j') {
    checkClosestHit(player2Notes, 1, 2);
  } else if (key == 'k') {
    checkClosestHit(player2Notes, 2, 2);
  } else if (key == 'l') {
    checkClosestHit(player2Notes, 3, 2);
  } else if (key == ';') {
    checkClosestHit(player2Notes, 4, 2);
  }

  if (screen.equals("end") && key == 'r') {
    resetGame();
  }
}

void checkClosestHit(ArrayList<Note> notes, int lane, int player) {
  Note closestNote = null;
  float closestDistance = Float.MAX_VALUE;

  for (int i = notes.size() - 1; i >= 0; i--) {
    Note note = notes.get(i);
    if (note.lane == lane && note.y > height - 150 && note.y < height - 50) {
      float distance = abs(note.y - (height - 100));
      if (distance < closestDistance) {
        closestDistance = distance;
        closestNote = note;
      }
    }
  }

  if (closestNote != null) {
    notes.remove(closestNote);
    if (closestDistance < 20) {
      updateScore(player, "Perfect", 300);
    } else if (closestDistance < 50) {
      updateScore(player, "Good", 200);
    } else if (closestDistance < 80) {
      updateScore(player, "Okay", 100);
    }
  }
}

void updateScore(int player, String feedback, int score) {
  if (player == 1) {
    player1Score += score;
    player1Feedback = feedback;
    player1FeedbackTime = millis();
  } else {
    player2Score += score;
    player2Feedback = feedback;
    player2FeedbackTime = millis();
  }
}

void displayFeedback() {
  fill(255);
  textSize(20);
  if (millis() - player1FeedbackTime < feedbackDuration) {
    text(player1Feedback, 200, height - 150);
  }
  if (millis() - player2FeedbackTime < feedbackDuration) {
    text(player2Feedback, 600, height - 150);
  }
}

class Note {
  float spawnTime;
  float y;
  int lane;
  float speed;

  Note(float spawnTime, int lane) {
    this.spawnTime = spawnTime;
    this.lane = lane;
    this.y = 0;
    this.speed = 5;
  }

  void move() {
    if (millis() > gameStartTime + spawnTime) {
      y += speed;
    }
  }

  void display(color noteColor, int xPos) {
    if (millis() > gameStartTime + spawnTime) {
      fill(noteColor);
      rect(xPos + (lane - 1) * 100, y, 100, 40);
    }
  }
}

void showEndScreen() {
  background(0);
  fill(255);
  textSize(32);
  text(result, width / 2, height / 2);
  textSize(20);
  text("Press 'R' to Restart", width / 2, height / 2 + 40);
}

void resetGame() {
  screen = "start";
  player1Score = 0;
  player2Score = 0;
  gameStarted = false;
  player1Notes.clear();
  player2Notes.clear();
  player1Feedback = "";
  player2Feedback = "";
}
